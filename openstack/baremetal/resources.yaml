---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: ironic
  name: ironic
spec:
  chart:
    git: https://github.com/openinfradev/openstack-helm.git
    path: ironic
    ref: $(Values.site.spec.chart_ref)
    skipDepUpdate: true
  releaseName: ironic
  targetNamespace: openstack
  values:
    bootstrap:
      image:
        enabled: false
        openstack:
          enabled: true
          ks_use: ironic
          source_base: https://tarballs.opendev.org/openstack/ironic-python-agent/tinyipa/files
        structured:
          ironic-agent.initramfs:
            container_format: ari
            disk_format: ari
            source: tinyipa-stable-stein.gz
          ironic-agent.kernel:
            container_format: aki
            disk_format: aki
            source: tinyipa-stable-stein.vmlinuz
      network:
        enabled: true
        openstack:
          enabled: true
      object_store:
        enabled: false
    conf:
      ironic:
        DEFAULT:
          debug: true
          debug_tracebacks_in_api: true
          enabled_boot_interfaces: pxe
          enabled_hardware_types: ipmi, idrac
          enabled_management_interfaces: ipmitool, idrac
          enabled_power_interfaces: ipmitool, idrac
        conductor:
          clean_callback_timeout: 3600
          deploy_callback_timeout: 3600
        deploy:
          erase_devices_priority: 0
    endpoints:
      baremetal:
        hosts:
          public: $(Values.site.spec.baremetal.public_endpoint_ip)
        port:
          api:
            public: 30511
      identity:
        auth:
          admin:
            password: password
            username: admin
          cinder:
            password: password
            username: ironic
      oslo_db:
        auth:
          admin:
            password: password
            username: root
          cinder:
            password: password
            username: ironic
      oslo_messaging:
        auth:
          admin:
            password: password
            username: rabbitmq
          ironic:
            password: password
            username: ironic
        statefulset: null
    images:
      pull_policy: IfNotPresent
      tags:
        bootstrap: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        db_drop: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        db_init: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        dep_check: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.images.dep_check)
        image_repo_sync: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.images.image_repo_sync)
        ironic_api: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-ironic-api:$(Values.openstack.spec.tag)
        ironic_conductor: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-ironic-conductor:$(Values.openstack.spec.tag)
        ironic_db_sync: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-ironic-api:$(Values.openstack.spec.tag)
        ironic_manage_cleaning_network: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        ironic_pxe: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-ironic-pxe:$(Values.openstack.spec.tag)
        ironic_pxe_http: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.images.ironic_pxe_http)
        ironic_pxe_init: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-ironic-pxe:$(Values.openstack.spec.tag)
        ironic_retrive_cleaning_network: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        ironic_retrive_swift_config: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        ks_endpoints: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        ks_service: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        ks_user: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.version)/ubuntu-source-heat-engine:$(Values.openstack.spec.tag)
        rabbit_init: $(Values.site.spec.docker_registry)/$(Values.openstack.spec.images.rabbit_init)
    network:
      api:
        node_port:
          enabled: true
          port: 30511
      pxe:
        device: $(Values.site.spec.baremetal.pxe_device)
        neutron_network_name: baremetal-net
        neutron_provider_network: baremetal
        neutron_subnet_alloc_end: $(Values.site.spec.baremetal.neutron_subnet_alloc_end)
        neutron_subnet_alloc_start: $(Values.site.spec.baremetal.neutron_subnet_alloc_start)
        neutron_subnet_cidr: $(Values.site.spec.baremetal.neutron_subnet_cidr)
        neutron_subnet_dns_nameserver: 8.8.8.8
        neutron_subnet_gateway: $(Values.site.spec.baremetal.neutron_subnet_gateway)
        neutron_subnet_name: baremetal-subnet
    pod:
      replicas:
        api: 1
        conductor: 1
      security_context:
        ironic:
          pod:
            runAsUser: 42422
        ironic_api:
          pod:
            runAsUser: 42422
        ironic_conductor:
          pod:
            runAsUser: 42422
      user:
        ironic:
          uid: 42422
  wait: true
